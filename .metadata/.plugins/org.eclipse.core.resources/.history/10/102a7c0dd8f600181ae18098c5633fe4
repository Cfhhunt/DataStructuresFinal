package for_ds_final_colin_tim;

import java.util.*;

public class SeparateChainingHashTable {

	private static final int DEFAULT_TABLE_SIZE = 101;
	private List<Contact> [] theLists;//The Hash list
	private int currentSize;//number of Contacts in the table

	SeparateChainingHashTable() {
		theLists = new LinkedList[DEFAULT_TABLE_SIZE];
		for(int i = 0; i < theLists.length; i++) {
			theLists[i] = new LinkedList<>();	
		}
	}//SeparateChainingHashTable

	SeparateChainingHashTable(int theSize) {
		theLists = new LinkedList[nextPrime(theSize)];
		for(int i = 0; i < theLists.length; i++) {
			theLists[i] = new LinkedList<>();
		}
	}//SeparateChainingHashTable

	private void rehash() {
		List<Contact> [] oldLists = theLists;

		theLists = new List[nextPrime(2*theLists.length)];
		for(int j = 0; j < theLists.length; j++) {
			theLists[j] = new LinkedList<>();
		}

		currentSize = 0;
		for(int i = 0; i < oldLists.length; i ++) {
			for( Contact contact : oldLists[i]) {
				insert(contact);
			}
		}
	}//rehash

	private int myHash(String x) {
		int hashVal = x.hashCode();

		hashVal %= theLists.length;
		if (hashVal == 0) {
			hashVal += theLists.length;
		}

		return hashVal;
	}//myHash
	
	private static int nextPrime(int n) {
		n++;
		while(!isPrime(n)) {
			n+=2;
		}
		return n;
	}//nextPrime

	private static boolean isPrime(int n) {
        if (n == 2) 
            return true;
        if (n < 2 || n % 2 == 0) 
            return false;
        for (int i = 3; i * i <= n; i += 2)
            if (n % i == 0) 
                return false;
        return true;
	}//isPrime

	public boolean insert(Contact newContact) {
		List<Contact> nameList = theLists[myHash(newContact.getName())];
		List<Contact> numberList = theLists[myHash(newContact.getNumber())];
		if (!nameList.contains(newContact) && !numberList.contains(newContact)) {
			nameList.add(newContact);
			numberList.add(newContact);
			currentSize+=2;
			if(currentSize > theLists.length) {
				rehash();
			}
		} else {return false;}
		return true;
	}//insert

	public boolean insert(String theName, String theNumber) {
		Contact newContact = new Contact(theName, theNumber);
		List<Contact> nameList = theLists[myHash(newContact.getName())];
		List<Contact> numberList = theLists[myHash(newContact.getNumber())];
		if (!nameList.contains(newContact) && !numberList.contains(newContact)) {
			nameList.add(newContact);
			numberList.add(newContact);
			currentSize+=2;
			if(currentSize > theLists.length) {
				rehash();
			}
		} else {return false;}
		return true;
	}//insert

	public Contact find(String nameOrNumber) {
		List<Contact> nameList = theLists[myHash(nameOrNumber)];
		List<Contact> numberList = theLists[myHash(nameOrNumber)];
		for( Contact contact : nameList) {
			if (contact.getName() == nameOrNumber);
			return contact;
		}
		for( Contact contact : numberList) {
			if (contact.getNumber() == nameOrNumber);
			return contact;
		}
		return null;
	}//find

	public boolean delete(String nameOrNumber) {
		Contact toDelete = find(nameOrNumber);
		List<Contact> nameList = theLists[myHash(toDelete.getName())];
		List<Contact> numberList = theLists[myHash(toDelete.getNumber())];
		if(!nameList.contains(toDelete) && !numberList.contains(toDelete)) {
			nameList.remove(toDelete);
			numberList.remove(toDelete);
		} else {return false;}
		return true;
	}//delete

	public int size() {
		return currentSize;
	}//size

	public void printAllContacts() {

	}//printAllContacts

	public static void main(String[] args) {
		SeparateChainingHashTable ourList = new SeparateChainingHashTable();
		ourList.insert("Captain Falcon", "1234567890");
		ourList.insert("Gary", "0987654321");
		
		System.out.println(" " + ourList.find("Gary"));
		System.out.println(" " + ourList.find("Jeff"));

	}//main

}//SeparateChainingHashTable
