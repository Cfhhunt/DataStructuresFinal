package for_ds_final_colin_tim;

import java.util.*;

public class SeparateChainingHashTable<AnyType> {

	private static final int DEFAULT_TABLE_SIZE = 101;
	private List<Contact> [] theLists;//The Hash list
	private int currentSize;//number of Contacts in the table

	SeparateChainingHashTable() {
		theLists = new LinkedList[DEFAULT_TABLE_SIZE];
		for(int i = 0; i < DEFAULT_TABLE_SIZE; i++) {
			theLists[i] = new LinkedList<Contact>();
		}
	}//SeparateChainingHashTable

	public boolean insert(Contact contact) {
		if(find(contact.getName())!=null || find(contact.getNumber())!=null) return false;
		List<Contact> nameList = theLists[myHash(contact.getName())];
		List<Contact> numList = theLists[myHash(contact.getNumber())];
		nameList.add(contact);
		numList.add(contact);
		currentSize+=2;
		if(currentSize > theLists.length) {
			rehash();
		}
		return true;
	}//insert contact

	public boolean insert(String theName, String theNumber) {		
		return insert(new Contact(theName, theNumber));
	}//insert name and number

	public boolean insert(String theName, String theNumber, String theAddress, String theEmail) {		
		return insert(new Contact(theName, theNumber, theAddress, theEmail));
	}//insert name, number, address, email

	public boolean delete(String nameOrNumber) {//TODO:
		Contact toDelete = find(nameOrNumber);
		if(toDelete == null) return false;
		List<Contact> nameList = theLists[myHash(toDelete.getName())];
		List<Contact> numberList = theLists[myHash(toDelete.getNumber())];
		if(nameList.contains(toDelete) && numberList.contains(toDelete)) {
			nameList.remove(toDelete);
			numberList.remove(toDelete);
		} else {return false;}
		return true;
	}//delete

	public boolean edit(String toDelete, Contact toAdd) {
		if (delete(toDelete) && insert(toAdd)) return true;
		return false;
	}

	public Contact find(String nameOrNumber) {
		List<Contact> nameList = theLists[myHash(nameOrNumber)];
		List<Contact> numberList = theLists[myHash(nameOrNumber)];
		for( Contact contact : nameList) {
			if (contact.getName().compareTo(nameOrNumber)==0);
			return contact;
		}
		for( Contact contact : numberList) {
			if (contact.getNumber().compareTo(nameOrNumber)==0);
			return contact;
		}
		return null;
	}//find

	private void rehash() {//Doubles the size of the list and rehashes all Contacts
		List<Contact> [] oldLists = theLists;

		theLists = new List[nextPrime(2*theLists.length)];
		for(int j = 0; j < theLists.length; j++) {
			theLists[j] = new LinkedList<>();
		}

		currentSize = 0;
		for(int i = 0; i < oldLists.length; i ++) {
			for( Contact contact : oldLists[i]) {
				insert(contact);
			}
		}
	}//rehash

	private int myHash(String x) {//Gets the hash value of the name or number
		int hashVal = x.hashCode();

		hashVal = Math.abs(hashVal);

		hashVal %= theLists.length;

		return hashVal;
	}//myHash

	public int nextPrime(int n){//Finds the next prime number
		int counter;
		n++;   
		while(true){
			counter = 0;
			for(int i = 2; i <= Math.sqrt(n); i ++){
				if(n % i == 0)  counter++;
			}
			if(counter == 0)
				return n;
			else{
				n++;
				continue;
			}
		}
	}//nextPrime

	private static boolean isPrime(int n) {//Returns true or false if n is prime
		if (n == 2) 
			return true;
		if (n < 2 || n % 2 == 0) 
			return false;
		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0) 
				return false;
		return true;
	}//isPrime

	public String printAllContacts() {//Prints every contact
		String toReturn = "Contacts\n";
		Contact[] array = new Contact[currentSize];
		for(List<Contact> list : theLists) {
			for (Contact contact : list) { 
				if (theLists[myHash(contact.getName())] == list) {
					toReturn += "Name: " + contact.getName() + ", Number: " + contact.getNumber() + "\n";
				}
			}
		}
		return toReturn;
	}//printAllContacts
}//SeparateChainingHashTable

